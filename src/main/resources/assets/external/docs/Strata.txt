==== Tile Data ===

Information about each tile consists of a contiguous block of non-empty lines
in any file directly under `config/strata/tiledata`. Each line works like a
keyvalue or a key with multiple values. Line order within a block does not
matter unless stated otherwise.

<> values are required. [] values are optional.

--- Data Structures & Bound Integrals ---

Type: BlendMode
Description:
    A string that matches an entry in the BlendMode enum.

Type: EnumPlantType
Description:
    A string that matches an entry in the EnumPlantType enum.
    Mods may add to this enumeration at any time.

Type: meta
Description:
    An integer from 0 to 15 (inclusive).

Type: normal
Description:
    A floating-point value from 0.0 to 1.0 (inclusive).

Type: ResourceLocation
Description:
    A string of the form "[domain:]<path>". The domain defaults to "minecraft" when omitted.

Type: RPNExpression
Description:
    A string representing a mathematical expression in Reverse Polish Notation, such as "1 2 + 3 *".
    Be aware that doubles are used internally which may lead to rounding errors and faulty logic.
    Numeric operators: +, add, -, sub, *, mul, /, div, %, mod, ^, pow
    Boolean operators: >, gt, >=, ge, <, lt, <=, le, ==, eq, !=, ne, !, not, ?, if, ?:, ifelse
    Functions: abs, ceil, dec, dup, floor, fmod, inc, log, log10, log1p, neg, max, min, pop, rand, recip,
        round, sign, sqrt
    Variables may be provided by the evaluation context but cannot be set within the expression.

Type: TileType
Description:
    A string that matches an entry in the TypeType enum.

--- Keyvalues ---

Key: generate
Value: <tileSetName> <TileType>
Description:
    Register a tile set's tile type to be generated.
    Recipes, drops, and other properties are determined using tiles in the same set.
    Double slabs are special and should not be explicitly defined.

Key: host
Value: <ResourceLocation>[:<meta>]
Description:
    Register the block as one from which ores may acquire various properties. Does not generate actual blocks or items.
    When used with "generate", the Value (not Key!) is ignored.
    Only applies to primary tile types.

Key: ore
Value: <name>
Description:
    Register an ore to be generated.

Key: oreDict
Value: <itemBlockOreDictionaryName> [itemOreDictionaryName] [fragmentItemOreDictionaryName]
Description:
    Register the block item, ore item, and/or fragment item to the ore dictionary.
    Each may be registered independently. Omit, or use a hyphen, to skip that object's registration.
    itemOreDictionaryName defaults to itemBlockOreDictionaryName.
    itemOreDictionaryName does not apply when used with "generate".
    For each entry, Strata will replicate the first furnace recipe found as provided by vanilla or another mod.
    Only applies to ores and primary tile types.

Key: type
Value: <TileType>
Description:
    Defines common block properties such as harvest tool, sound type, and block model.
    Value is redundant with "generate".

Key: harvestTool
Value: <String>
Description:
    Set the effective tool for the block or use a hyphen to remove it.
    Overrides what "generate" and "type" provide by default.

Key: harvestLevel
Value: <int>
Default: 0
Description:
    Level of tool required for harvest. The tool itself is defined by the tile type.
    For ores, the value will factor into block break speed but harvest checks will use the host's harvest level.
    If the tile type has a parent, the parent's value takes priority as the default.

Key: hardness
Value: <float>
Default: 1.0
Description:
    Harvest difficulty. For reference, vanilla stone has a hardness of 1.5.
    For ores, the hardness of the host will also play a role.
    If the tile type has a parent, the parent's value takes priority as the default.

Key: resistance
Value: <float>
Default: 1.7 * hardness if ore, 5.0 * hardness otherwise
Description:
    Explosion resistance. For reference, vanilla stone has a resistance of 10.
    If the tile type has a parent, the parent's value takes priority as the default.

Key: sustains
Value: <<EnumPlantType>|<ResourceLocation>[:<meta>]>+
Description:
    Allows the block to sustain EnumPlantType(s) and/or what is sustained by other block(s).
    Multiple values are allowed. EnumPlantType order does not matter but ResourceLocation order does.
    Only applies to primary tile types.
    Disclaimer: This may not work due to world caching Strata cannot intercept. Some plants check for specific block(s).

Key: burnTime
Value: <int>
Default: 0
Description:
    Number of ticks the item will burn in a furnace.
    For reference, there are 20 ticks per second and it takes 10 seconds to smelt an item. Standard coal is 1600.
    Only applies to ores and primary tile types.

Key: lightLevel
Value: <int>
Default: 0
Description:
    The amount of light (0-15) to emit.

Key: slipperiness
Value: <float>
Default: 0.6
Description:
    Influences entity drag and acceleration.
    As slipperiness increases, acceleration increases, and more speed is preserved.
    Does not apply to ores.

Key: texture[Caps|Sides|Up|Down|North|South|East|West]
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the block model using an optional array of layers blended onto a required base.
    Only "texture" is required. The other keys override a side or group of sides.
    If the tile type has a parent, the parent's complete texture map will be used by default.
    Any of these keys will cause a new texture map to be created.
    Although Strata does not generate host blocks, these textures are used for their particles.
    Must come after a "generate", "host", or "ore" line.

Key: oreItemTexture
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the ore item model using an optional array of layers blended onto a required base.
    Defaults to the block texture generated by "texture".
    Only applies to ores.

Key: soundEvents
Value: [<volume:normal> <pitch:normal>] <breakResource> <stepResource> <placeResource> <hitResource> <fallResource>
Description:
    Create and use a SoundType composed of entries defined in "sounds.json" from any installed mod or resource pack.
    SoundEvent resources in non-Strata domains are expected to be registered by the owner of that domain.
    This value will propagate to child tile types which normally share the same sound type as their parent.
    For example, LEVER derives from COBBLE but the value will not propagate since LEVER uses a different sound type.
    volume and pitch default to 1.0.
    Must come after a "generate" line.
    Does not apply to ores or hosts.

Key: ambientSound
Value: [<volume:normal> <pitch:normal>] <ResourceLocation>
Description:
    Randomly play a SoundEvent from the block like the crackle of an active furnace (but a lot less often).
    volume and pitch default to 1.0.
    Does not apply to hosts.

Key: blockstate
Value: <ResourceLocation>
Description:
    Override the Strata-provided, general-purpose, default blockstate. Custom blockstates cannot omit variants.
    Does not apply to hosts.

Key: convertsTo
Value: <ResourceLocation>[:<meta>]
Description:
    One-way, one-to-one conversion to another item for compatibility purposes. Also used in recipe replication.
    Some tile types have a pre-determined, vanilla equivalent. Use a hyphen to ignore it.
    For ores, this applies to the ore item, not the creative mode item block, and functions like proxy.

Key: furnaceResult
Value: <ResourceLocation>[:<meta>]
Description:
    Add a furnace recipe or override oreDict's behaviour.
    Only applies to ores and primary tile types.

Key: furnaceExp
Value: <normal>
Default: 0
Description:
    Set the experience given for smelting the item in a furnace.
    If unset and another recipe results in the target item, that recipe's experience will be used instead.
    Only used with furnaceResult.

Key: fragmentTexture
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the fragment item using an optional array of layers blended onto a required base.
    This KV implies a fragment will be created. A dedicated key is redundant.
    Only applies to some primary tile types.

Key: fragmentConvertsTo
Value: <ResourceLocation>[:<meta>]
Description:
    One-way, one-to-one conversion to another item for compatibility purposes.

Key: fragmentFurnaceResult
Value: <ResourceLocation>[:<meta>]
Description:
    Add a furnace recipe for the fragment or override oreDict's behaviour.

Key: fragmentFurnaceExp
Value: <normal>
Default: 0
Description:
    Set the experience given for smelting the fragment in a furnace.
    If unset and another recipe results in the target item, that recipe's experience will be used instead.
    Only used with fragmentFurnaceResult.

Key: proxy
Value: <ResourceLocation>[:<meta>]
Description:
    Display the name, show the tooltip, drop the drops, sustain the plants, etc. of the specified block instead.
    Only applies to ores, and specifically, their blocks. Use convertsTo to do the same for the ore item.

Key: hostAffinities
Value: <<ResourceLocation>[:<meta>]>+
Description:
    Prioritize one or more hosts for an ore in descending order.
    Default host selection heuristics apply if the ore is not adjacent to any given host.

Key: forceHost
Value: <ResourceLocation>[:<meta>]
Description:
    Force the ore to use a specific host.
    This keyvalue will be ignored if the host does not exist.
    This may be useful for compatibility but is not what Strata was designed for.

Key: dropGroup.<groupName>
Value: [weight:int] <ResourceLocation> [minimum:int[-<maximum:int>]]
OR: [weight:int] <ResourceLocation> <minDropExpr:RPNExpression>[ ~ <maxBonusDropExpr:RPNExpression>]
Description:
    Controls the probability and amount of what items an ore can drop.
    weight controls how likely a drop is within the group and defaults to 100. The sum of weights can exceed 100.
    ResourceLocation refers to the item that will drop.
    ResourceLocation may also be '*' to represent the ore's own item or '-' to represent to no item at all (no drop).
    The "minimum only" form (e.g. "5") will always drop the exact amount.
    The "minimum-maximum" form (e.g. "4-9" for lapis) will use vanilla's standard fortune formula.
    The Reverse Polish Notation form (e.g. "1 ~ f 2 *") will drop at least minDropExpr and up to maxBonusDropExpr more.
    maxBonusDropExpr will use a discrete uniform distribution (all values equally probable).
    The level of fortune is provided as the variable 'f'.
    The position of the block is provided as the variables 'x', 'y', and 'z'.
    Tool enchantments are provided by their resource locations (e.g. fortune, minecraft:fortune, or mymod:myenchant).
    Expression results are rounded to the nearest integer. Negative results are clamped to zero.
    For example, "0 ~ 0.2 f *" has a 50% chance of dropping one item with Fortune III.
    All groups are evaluated independently to provide multiple drops at once.
    Never drops more than a full stack from each group.

Key: exp
Value: [minimum:int[-<maximum:int>]]
OR: <minDropExpr:RPNExpression>[ ~ <maxBonusDropExpr:RPNExpression>]
Default: 0
Description:
    Controls the amount of experience an ore can drop.
    The "minimum only" form (e.g. "5") will always drop the exact amount.
    The "minimum-maximum" form (e.g. "4-9") will use vanilla's standard fortune formula.
    The Reverse Polish Notation form (e.g. "1 ~ f 2 *") will drop at least minDropExpr and up to maxBonusDropExpr more.
    maxBonusDropExpr will use a discrete uniform distribution (all values equally probable).
    The level of fortune is provided as the variable 'f'.
    The position of the block is provided as the variables 'x', 'y', and 'z'.
    Other enchantments are not available and will evaluate to zero.
    Expression results are rounded to the nearest integer. Negative results are clamped to zero.
    For example, "0 ~ 0.2 f *" has a 50% chance of dropping one experience with Fortune III.

Key: lang.<language>[_<region>]
Value: <String>
Description:
    Set the display name for a locale.
    The locale format parallels BCP 47 but varies slightly to match what Forge provides. ("en_us", "ru_ru", etc.)
    A region takes priority over a generic language if both exist. ("en_us" > "en")
    A region will not fall back onto another region.
    If no translation is found for the current locale, "en" will be used, if present. ("pt_pt" > "pt" > "en")
    The registry name will be used as the final fallback.

Key: tooltip.<language>[_<region>]
Value: <String>
Description:
    Set the tooltip for a locale.
    Text format codes ("§r") and newlines ("\n") are supported.
    The locale format parallels BCP 47 but varies slightly to match what Forge provides. ("en_us", "ru_ru", etc.)
    A region takes priority over a generic language if both exist. ("en_us" > "en")
    A region will not fall back onto another region.
    If no translation is found for the current locale, "en" will be used, if present. ("pt_pt" > "pt" > "en")

Key: activatable
Value: N/A
Description:
    This flag fine-tunes implementation details and should not be used unless you know what it does.

Key: dragonImmune
Value: N/A
Description:
    Prevents the Ender Dragon from destroying the block.

Key: witherImmune
Value: N/A
Description:
    Prevents the Wither from destroying the block.
