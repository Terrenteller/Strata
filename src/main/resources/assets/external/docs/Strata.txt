==== Tile Data ===

Information about each tile consists of a contiguous block of non-empty lines
in any file directly under `config/strata/tiledata`. Each line works like a
keyvalue or a key with multiple values. Line order within a block does not
matter unless stated otherwise.

<> values are required. [] values are optional.

--- Keyvalues ---

Key: generate
Value: <tileSetName> <TileType>
Description:
    Register a tile set's tile type to be generated.
    Recipes, drops, and other properties are determined using tiles in the same set.
    Double slabs are special and should not be explicitly defined.

Key: host
Value: <ResourceLocation>[:<meta>]
Description:
    Register the block as one from which ores may acquire various properties. Does not generate actual blocks or items.
    When used with "generate", the Value (not Key!) is ignored.
    Only applies to primary tile types.

Key: ore
Value: <name>
Description:
    Register an ore to be generated.

Key: oreDict
Value: <itemBlockOreDictionaryName> [itemOreDictionaryName] [fragmentItemOreDictionaryName]
Description:
    Register the block item, ore item, and/or fragment item to the ore dictionary.
    Each may be registered independently. Omit, or use a hyphen, to skip that object's registration.
    itemOreDictionaryName defaults to itemBlockOreDictionaryName.
    itemOreDictionaryName does not apply when used with "generate".
    Ores with an itemBlockOreDictionaryName of "oreRedstone" will make the block behave like vanilla redstone ore.
    For each entry, Strata will replicate the first furnace recipe found as provided by vanilla or another mod.
    Only applies to ores and primary tile types.

Key: type
Value: <TileType>
Description:
    Defines common block properties such as harvest tool, sound type, and block model.
    Value is redundant with "generate".

Key: harvestLevel
Value: <int>
Default: 0
Description:
    Level of tool required for harvest. The tool itself is defined by the tile type.
    If the tile type has a parent, the parent's value takes priority as the default.

Key: hardness
Value: <float>
Default: 1.0
Description:
    Harvest difficulty. For reference, vanilla stone has a hardness of 1.5.
    If the tile type has a parent, the parent's value takes priority as the default.

Key: resistance
Value: <float>
Default: 1.7 * hardness if ore, 5.0 * hardness otherwise
Description:
    Explosion resistance. For reference, vanilla stone has a resistance of 10.
    If the tile type has a parent, the parent's value takes priority as the default.

Key: sustains
Value: <<EnumPlantType>|<ResourceLocation>[:<meta>]>+
Description:
    Allows the block to sustain EnumPlantType(s) and/or what is sustained by other block(s).
    Multiple values are allowed. EnumPlantType order does not matter but ResourceLocation order does.
    Only applies to primary tile types.
    Disclaimer: This may not work due to world caching Strata cannot intercept. Some plants check for specific block(s).

Key: burnTime
Value: <int>
Default: 0
Description:
    Number of ticks the item will burn in a furnace.
    For reference, there are 20 ticks per second and it takes 10 seconds to smelt an item. Standard coal is 1600.
    Only applies to ores and primary tile types.

Key: texture[Caps|Sides|Up|Down|North|South|East|West]
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the block model using an optional array of layers blended onto a required base.
    If the tile type has a parent, the parent's complete texture map will be used by default.
    Any of these keys will cause a new texture map to be created.
    Although Strata does not generate host blocks, these textures are used for their particles.
    Must come after a "generate", "host", or "ore" line.

Key: soundEvents
Value: [<volume:float> <pitch:float>] <breakResource> <fallResource> <hitResource> <placeResource> <stepResource>
Description:
    Create and use a SoundType composed of entries defined in "sounds.json" from any installed mod or resource pack.
    SoundEvent resources in non-Strata domains are expected to be registered by the owner of that domain.
    This value will propagate to child tile types which normally share the same sound type as their parent.
    For example, LEVER derives from COBBLE but the value will not propagate since LEVER uses a different sound type.
    Must come after a "generate" line.
    Does not apply to ores or hosts.

Key: blockstate
Value: <ResourceLocation>
Description:
    Override the Strata-provided, general-purpose, default blockstate. Custom blockstates cannot omit variants.
    Does not apply to hosts.

Key: convertsTo
Value: <ResourceLocation>[:<meta>]
Description:
    One-way, one-to-one conversion to another item for compatibility purposes. Also used in recipe replication.
    Some tile types have a pre-determined, vanilla equivalent. Use a hyphen to ignore it.
    For ores, this applies to the ore item, not the creative mode item block.

Key: furnaceResult
Value: <ResourceLocation>[:<meta>]
Description:
    Add a furnace recipe or override oreDict's behaviour.
    Only applies to ores and primary tile types.

Key: furnaceExp
Value: <float>
Default: 0
Description:
    Set the experience given for smelting the item in a furnace.
    If unset and another recipe results in the target item, that recipe's experience will be used instead.
    Only used with furnaceResult.

Key: fragmentTexture
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the fragment item using an optional array of layers blended onto a required base.
    This KV implies a fragment will be created. A dedicated key is redundant.
    Only applies to some primary tile types.

Key: fragmentConvertsTo
Value: <ResourceLocation>[:<meta>]
Description:
    One-way, one-to-one conversion to another item for compatibility purposes.

Key: fragmentFurnaceResult
Value: <ResourceLocation>[:<meta>]
Description:
    Add a furnace recipe for the fragment or override oreDict's behaviour.

Key: fragmentFurnaceExp
Value: <float>
Default: 0
Description:
    Set the experience given for smelting the fragment in a furnace.
    If unset and another recipe results in the target item, that recipe's experience will be used instead.
    Only used with fragmentFurnaceResult.

Key: proxy
Value: <ResourceLocation>[:<meta>]
Description:
    Drop the drops, sustain the plants, etc. of the specified block instead.
    Only applies to ores.

Key: drops
Value: <baseDropAmount> [maxBonusDropExpr]
Default: 1
Description:
    Controls the number of items dropped by an ore.
    Will always drop baseDropAmount with a random bonus of zero to the result of maxBonusDropExpr, inclusive.
    maxBonusDropExpr shall be a simple expression in Reverse Polish Notation. Operators +, -, *, and / are available.
    The value of fortune is provided as the variable 'f'.
    The result of maxBonusDropExpr is rounded to the nearest integer.
    For example, "drops 0 0.2 f *" will only give a 50% chance of dropping an ore with Fortune III.
    Never drops more than a full stack.

Key: exp
Value: <baseExp> [maxBonusExpExpr]
Default: 0
Description:
    Controls the amount of experience dropped by an ore.
    Will always drop baseExp with a random bonus of zero to the result of maxBonusExpExpr, inclusive.
    maxBonusExpExpr shall be a simple expression in Reverse Polish Notation. Operators +, -, *, and / are available.
    The value of fortune is provided as the variable 'f'.
    The result of maxBonusExpExpr is rounded to the nearest integer.
    For example, "exp 1 2 f +" will provide 1 to 6 experience with Fortune III.

Key: lang.<language>[_<region>]
Value: <localizedName>
Description:
    Use localizedName as the user-visible text for a block and item in a locale.
    The locale format parallels BCP 47 but varies slightly to match what Forge provides. ("en_us", "ru_ru", etc.)
    A region takes priority over a generic language if both exist. ("en_us" > "en")
    A region will not fall back onto another region.
    If no translation is found for the current locale, "en" will be used, if present. ("pt_pt" > "pt" > "en")
    The registry name or the ore name will be used as the final fallback.
