==== Tile Data ===

Information about each tile consists of a contiguous block of non-empty lines
in any file directly under `config/strata/tiledata`. Each line works like a
keyvalue or a key with multiple values. Line order within a block does not
matter unless stated otherwise.

`` is a reference to a key. '' is a reference to part of the value (or just a character).
<> values are required. [] values are optional.

--- Data Structures & Bound Integrals ---

Type: BlendMode
Description:
    A string that matches an entry in Strata's BlendMode enum.

Type: EnumPlantType
Description:
    A string that matches an entry in Minecraft's EnumPlantType enum.
    Mods may add to this enumeration at any time.

Type: meta
Description:
    An integer from 0 to 15 (inclusive).

Type: normal
Description:
    A floating-point value from 0.0 to 1.0 (inclusive).

Type: ResourceLocation
Description:
    A string of the form "[domain:]<path>". The domain defaults to "minecraft" when omitted.

Type: RPNExpression
Description:
    A string representing a mathematical expression in Reverse Polish Notation, such as "1 2 + 3 *".
    Be aware that doubles are used internally which may lead to rounding errors and faulty logic.
    Numeric operators: +, add, -, sub, *, mul, /, div, %, mod, ^, pow
    Boolean operators: >, gt, >=, ge, <, lt, <=, le, ==, eq, !=, ne, !, not, ?, if, ?:, ifelse
    Functions: abs, ceil, dec, dup, floor, fmod, inc, log, log10, log1p, neg, max, min, pop, rand, recip,
        round, sign, sqrt
    Variables may be provided by the evaluation context but cannot be set within the expression.

Type: SoundEvent
    An audio resource defined in a "sounds.json".
    These files may be provided by any mod or resource pack.

Type: SoundType
Description:
    A set of break, step, place, hit, and fall SoundEvents which share a volume and pitch.

Type: TileType
Description:
    A string that matches an entry in Strata's TypeType enum.

--- Keyvalues ---

Key: generate
Value: <tileSetName> <TileType>
Description:
    Register a tile set's tile type to be generated.
    Recipes, drops, and other properties are determined using tiles in the same set.
    Double slabs are special and should not be explicitly defined.

Key: host
Value: <ResourceLocation>[:<meta>]
Description:
    Register the block as one from which ores may acquire various properties.
    Random effects and other behaviours will not occur on blocks Strata does not itself create.
    When used with `generate`, Value is unnecessary and ignored, and only applies to primary tile types.
    Does not apply to ores.

Key: ore
Value: <name>
Description:
    Register an ore to be generated.

Key: oreDict
Value: <itemBlockOreDictionaryName> [itemOreDictionaryName] [fragmentItemOreDictionaryName]
Description:
    Register the block item, ore item, and/or fragment item to the ore dictionary.
    Each may be registered independently. Omit, or use a hyphen, to skip that object's registration.
    'itemOreDictionaryName' defaults to 'itemBlockOreDictionaryName'.
    'itemOreDictionaryName' does not apply when used with `generate`.
    For each entry, Strata will replicate the first furnace recipe found as provided by vanilla or another mod.
    Only applies to ores and primary tile types.

Key: type
Value: <TileType>
Description:
    Defines common block properties such as harvest tool, sound type, and block model.
    Value is redundant with `generate`.

Key: harvestTool
Value: <String>
Description:
    Set the effective tool for the block or use a hyphen to remove it.
    Overrides what `generate` and `type` provide by default.

Key: harvestLevel
Value: <int>
Default: 0
Description:
    Level of tool required for harvest. The tool itself is defined by the tile type.
    If the tile type has a parent, the parent's value is the default.
    For ores, the value will factor into block break speed but harvest checks will use the host's harvest level.

Key: hardness
Value: <float>
Default: 1.0
Description:
    Harvest difficulty. For reference, vanilla stone has a hardness of 1.5.
    If the tile type has a parent, the parent's value is the default.
    For ores, the hardness of the host will also play a role.

Key: resistance
Value: <float>
Default: 1.7 * hardness if ore, 5.0 * hardness otherwise
Description:
    Explosion resistance. For reference, vanilla stone has a resistance of 10.
    If the tile type has a parent, the parent's value is the default.

Key: sustains
Value: <<EnumPlantType>|<ResourceLocation>[:<meta>]>+
Description:
    Allows the block to sustain EnumPlantType(s) and/or what is sustained by other block(s).
    Multiple values are allowed. EnumPlantType order does not matter but ResourceLocation order does.
    Only applies to primary tile types.
    Disclaimer: This may not work due to world caching Strata cannot intercept. Some plants check for specific block(s).

Key: burnTime
Value: <int>
Default: 0
Description:
    Number of ticks the item will burn in a furnace.
    For reference, there are 20 ticks per second and it takes 10 seconds to smelt an item. Standard coal is 1600.
    Only applies to ores and primary tile types.

Key: lightLevel
Value: <int>
Default: 0
Description:
    The amount of light (0-15) to emit.
    If the tile type has a parent, the parent's value is the default.

Key: lightOpacity
Value: <int>
Description:
    The amount of light blocked by the block.
    If the tile type has a parent, the parent's value is the default.

Key: meltsAt
Value: <int>
Description:
    Randomly break the block when the block light level meets or exceeds Value, just like ice.
    If the block also emits a sufficient amount of light, it can melt itself.
    Only applies to ores and primary tile types.

Key: slipperiness
Value: <float>
Default: 0.6
Description:
    Influences entity acceleration and drag.
    As slipperiness increases, acceleration and drag decrease.
    If the tile type has a parent, the parent's value is the default.
    Does not apply to ores.

Key: texture[Caps|Sides|Up|Down|North|South|East|West]
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the block model using an optional array of layers blended onto a required base.
    Only "texture" is required. The other keys override a side or group of sides.
    If the tile type has a parent, the parent's complete texture map is the default.
    Specifying any of these keys will generate a new and distinct texture map.
    Although Strata does not generate host blocks, these textures are used for their particles.
    Must come after a `generate`, `host`, or `ore` key.

Key: oreItemTexture
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the ore item model using an optional array of layers blended onto a required base.
    A reasonable default will be created using a block texture if omitted.
    Only applies to ores.

Key: soundEvents
Value: [<volume:normal> <pitch:normal>] <breakResource> <stepResource> <placeResource> <hitResource> <fallResource>
Description:
    Create and use a SoundType composed of available SoundEvents.
    SoundEvent resources outside of Strata's domain are expected to be registered by the owner of that domain.
    If the tile type's default sound type matches the parent's default, the parent's actual value is the default.
    For example, LEVER will not inherit a custom sound type from COBBLE because they normally sound different.
    volume and pitch default to 1.0.
    Must come after `generate`.
    Does not apply to ores and non-generated hosts.

Key: ambientSound
Value: [<volume:normal> <pitch:normal>] <ResourceLocation>
Description:
    Randomly play a SoundEvent from the block like the crackle of an active furnace (but a lot less often).
    volume and pitch default to 1.0.
    Does not apply to non-generated hosts.

Key: blockstate
Value: <ResourceLocation>
Description:
    Override the Strata-provided, general-purpose, default blockstate. Custom blockstates cannot omit variants.
    Does not apply to non-generated hosts.

Key: breaksInto
Value: <ResourceLocation>[:<meta>]
Description:
    Replace the block with another when broken without silk touch.
    Drops will be forfeit to prevent infinite duplication.
    Only applies to ores and primary tile types.

Key: convertsTo
Value: <ResourceLocation>[:<meta>]
Description:
    One-way, one-to-one conversion to another item for compatibility purposes. Also used in recipe replication.
    Some tile types have a pre-determined, vanilla equivalent. Use a hyphen to ignore it.
    For ores, this applies to the ore item, not the creative mode item block, and functions like `proxy`.

Key: furnaceResult
Value: <ResourceLocation>[:<meta>]
Description:
    Add a furnace recipe or override `oreDict`'s behaviour.
    Only applies to ores and primary tile types.

Key: furnaceExp
Value: <normal>
Default: 0
Description:
    Set the experience given for smelting the item in a furnace.
    If unset and another recipe produces `furnaceResult`, that recipe's experience will be used instead.
    Only used with `furnaceResult`.

Key: fragmentTexture
Value: [<ResourceLocation> <BlendMode> <opacity:float>]* <ResourceLocation>
Description:
    Generate a texture for the fragment item using an optional array of layers blended onto a required base.
    This KV implies a fragment will be created. A dedicated key is redundant.
    STONE fragments prioritize reassembling into COBBLE and COBBLE will drop STONE fragments.
    Only applies to primary tile types.

Key: fragments
Value: [minimum:int[-<maximum:int>]]
OR: <minDropExpr:RPNExpression>[ ~ <maxBonusDropExpr:RPNExpression>]
Default: 4
Description:
    Controls the number of fragments dropped by a block.
    The "minimum only" form (e.g. "4") will always drop the exact amount.
    The "minimum-maximum" form (e.g. "1-4") will use vanilla's standard fortune formula.
    The RPN form (e.g. "1 ~ f 2 *") will drop at least 'minDropExpr' and up to and including 'maxBonusDropExpr' more.
    'maxBonusDropExpr' will use a discrete uniform distribution (all values equally probable).
    The level of fortune replaces the variable 'f'.
    The position of the block is not available and the variables 'x', 'y', and 'z' will evaluate to zero.
    Other enchantments are not available and will evaluate to zero.
    Expression results are rounded to the nearest integer. Negative results are clamped to zero.
    For example, "0 ~ 0.2 f *" has a 50% chance of dropping one fragment with Fortune III.
    Never drops more than four fragments to prevent infinite duplication.
    Only applies to primary tile types.

Key: fragmentConvertsTo
Value: <ResourceLocation>[:<meta>]
Description:
    One-way, one-to-one conversion to another item for compatibility purposes.

Key: fragmentFurnaceResult
Value: <ResourceLocation>[:<meta>]
Description:
    Add a furnace recipe for the fragment or override `oreDict`'s behaviour.

Key: fragmentFurnaceExp
Value: <normal>
Default: 0
Description:
    Set the experience given for smelting the fragment in a furnace.
    If unset and another recipe produces `fragmentFurnaceResult`, that recipe's experience will be used instead.
    Only used with `fragmentFurnaceResult`.

Key: fragmentBurnTime
Value: <ResourceLocation>[:<meta>]
Description:
    Number of ticks the fragment will burn in a furnace.
    For reference, there are 20 ticks per second and it takes 10 seconds to smelt an item. Standard coal is 1600.

Key: proxy
Value: <ResourceLocation>[:<meta>]
Description:
    Display the name, show the tooltip, drop the drops, sustain the plants, etc. of the specified block instead.
    Only applies to ores, and specifically, their blocks. Use `convertsTo` to do the same for the ore item.

Key: hostAffinities
Value: <<ResourceLocation>[:<meta>]>+
Description:
    Prioritize one or more hosts for an ore in descending order.
    Default host selection heuristics apply if the ore is not adjacent to a listed host.

Key: forceHost
Value: <ResourceLocation>[:<meta>]
Description:
    Force the ore to use a specific host.
    This keyvalue will be ignored if the host does not exist.
    This may be useful for compatibility but is not what Strata was designed for.

Key: dropGroup.<groupName>
Value: [weight:int] <ResourceLocation> [minimum:int[-<maximum:int>]]
OR: [weight:int] <ResourceLocation> <minDropExpr:RPNExpression>[ ~ <maxBonusDropExpr:RPNExpression>]
Description:
    Controls the probability and amount of what items an ore can drop.
    weight controls how likely a drop is within the group and defaults to 100.
    weight is treated as a ratio. The sum of weights does not have to equal 100.
    ResourceLocation refers to the item that will drop.
    ResourceLocation may also be '*' to represent the ore's own item or '-' to represent to no item at all (no drop).
    The "minimum only" form (e.g. "5") will always drop the exact amount.
    The "minimum-maximum" form (e.g. "4-9" for lapis) will use vanilla's standard fortune formula.
    The RPN form (e.g. "1 ~ f 2 *") will drop at least 'minDropExpr' and up to and including 'maxBonusDropExpr' more.
    'maxBonusDropExpr' will use a discrete uniform distribution (all values equally probable).
    The level of fortune replaces the variable 'f'.
    The position of the block replaces the variables 'x', 'y', and 'z'.
    Enchantment levels replace resource location variables (e.g. fortune, minecraft:fortune, or mymod:myenchant).
    Expression results are rounded to the nearest integer. Negative results are clamped to zero.
    For example, "0 ~ 0.2 f *" has a 50% chance of dropping one item with Fortune III.
    All groups are evaluated independently to provide multiple drops at once.
    Never drops more than a full stack from each group.

Key: exp
Value: [minimum:int[-<maximum:int>]]
OR: <minDropExpr:RPNExpression>[ ~ <maxBonusDropExpr:RPNExpression>]
Default: 0
Description:
    Controls the amount of experience a block can drop.
    The "minimum only" form (e.g. "5") will always drop the exact amount.
    The "minimum-maximum" form (e.g. "4-9") will use vanilla's standard fortune formula.
    The RPN form (e.g. "1 ~ f 2 *") will drop at least 'minDropExpr' and up to and including 'maxBonusDropExpr' more.
    'maxBonusDropExpr' will use a discrete uniform distribution (all values equally probable).
    The level of fortune replaces the variable 'f'.
    The position of the block replaces the variables 'x', 'y', and 'z'.
    Other enchantments are not available and will evaluate to zero.
    Expression results are rounded to the nearest integer. Negative results are clamped to zero.
    For example, "0 ~ 0.2 f *" has a 50% chance of dropping one experience with Fortune III.
    Only applies to ores and naturally-placed primary tile types.

Key: lang.<language>[_<region>]
Value: <String>
Description:
    Set the display name for a locale.
    The locale format parallels BCP 47 but varies slightly to match what Forge provides. ("en_us", "ru_ru", etc.)
    A region takes priority over a generic language if both exist. ("en_us" > "en")
    A region will not fall back onto another region.
    If no translation is found for the current locale, "en" will be used, if present. ("pt_pt" > "pt" > "en")
    The registry name will be used as the final fallback.

Key: tooltip.<language>[_<region>]
Value: <String>
Description:
    Set the tooltip for a locale.
    Text format codes (like "§r") and newlines ("\n") are supported.
    The locale format parallels BCP 47 but varies slightly to match what Forge provides. ("en_us", "ru_ru", etc.)
    A region takes priority over a generic language if both exist. ("en_us" > "en")
    A region will not fall back onto another region.
    If no translation is found for the current locale, "en" will be used, if present. ("pt_pt" > "pt" > "en")

Key: activatable
Value: N/A
Description:
    This flag fine-tunes implementation details and should not be used unless you know what it does.

Key: affectedByGravity
Value: N/A
Description:
    Allows the block to fall like sand and gravel regardless of its actual type.
    Only applies to primary and secondary tile types.

Key: dragonImmune
Value: N/A
Description:
    Prevents the Ender Dragon from destroying the block.
    Does not apply to non-generated hosts.

Key: fireSource
Value: N/A
Description:
    Prevents fire on top of the block from being extinguished by natural means.
    Does not apply to non-generated hosts.

Key: notReconstitutable
Value: N/A
Description:
    Prevents crafting a block from its fragments.
    Only applies to primary tile types.

Key: hasEffect
Value: N/A
Description:
    Gives the item an enchanted glint.
    Does not apply to non-generated hosts.

Key: noSilkTouch
Value: N/A
Description:
    Prevents the effects of silk touch.
    Only applies to primary tile types.

Key: witherImmune
Value: N/A
Description:
    Prevents the Wither from destroying the block.
    Does not apply to non-generated hosts.
